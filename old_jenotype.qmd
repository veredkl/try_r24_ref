---
title: "old_genotype"
execute:
  echo: false
  warning: false
  message: false
format: html
---

```{r}
source("functions.R")
```

```{r}
library(tidyverse)
library(reshape2)
library(ggplot2)
library(ggtext)
library(vdjbasevis)
```

```{r}

df<-read.csv("C:/Users/admin/Documents/master/macca/ref_2024_03_20/25_IGM_genotype_ref_2024_20_03.tsv", sep="\t")
load("2024-20-03_gene.usage.df.rda")

num_subjects = length(unique(df$subject))
```


```{r,echo=FALSE}

imgt_genes = 'IGHV'
load("2024-03-20_gene_igh_names.rda")

ASCs_on_ref=gene_sequence_names[grepl(imgt_genes, gene_sequence_names)]
lenght_ASCs_on_ref=length(ASCs_on_ref)
ASCs_on_genotype = unique(data_[grepl(imgt_genes, data_$gene), "gene"])
novel_ASCs_on_genotype = setdiff(ASCs_on_ref,ASCs_on_genotype)
length_novel_ASCs_on_genotype = length(novel_ASCs_on_genotype)
lenght_ASCs_on_genotype = length(setdiff(ASCs_on_genotype,novel_ASCs_on_genotype) )

lenght_ASCs_not_represented = lenght_ASCs_on_ref - lenght_ASCs_on_genotype


load("2024-03-20_allele_igh_names.rda")


alleles_on_ref=gene_sequence_names[grepl(imgt_genes, gene_sequence_names)]
lenght_alleles_on_ref=length(alleles_on_ref)
alleles_on_genotype = unique(data_[grepl(imgt_genes, data_$allele), "allele"])
novel_alleles_on_genotype = setdiff(alleles_on_genotype,alleles_on_ref)
length_novel_alleles_on_genotype = length(novel_alleles_on_genotype)
lenght_alleles_on_genotype = length(setdiff(alleles_on_genotype,novel_alleles_on_genotype) )

lenght_alleles_not_represented = lenght_alleles_on_ref - lenght_alleles_on_genotype


```


For the genotype inference we used the following conservative criteria:

- Zero mutations within the V region.
- Single assignment.
- Started from the first position of the V gene.


The genotype inference was done using the Bayesian method that considers up to four alleles per ASC, thereby allowing for the possibility of a gene duplication with both loci being heterozygous. The method provides a confidence level (lk). lk > 1 marked with black diagonal.


In a detailed analysis, it was found that of the `r lenght_ASCs_on_ref` existing IGHV clusters, `r lenght_ASCs_not_represented` are not represented in the genotypes of the `r num_subjects` subjects analyzed. `r lenght_alleles_not_represented` out of `r lenght_alleles_on_ref` existing IGHV references were not found in the genotypes of the subjects.

There are `r length_novel_alleles_on_genotype` IGHV novel allele that were found in the genotypes of these `r num_subjects` subjects.



```{r}
allele_palette_new <-vdjbasevis:::ALLELE_PALETTE
names(allele_palette_new) <- c("01" ,"02", "03", "04" ,"05", "06", "07","08" ,"09" ,"10", "11", "12", "13", "14", "15",
                               "16" ,"17", "18", "19", "20" ,"21" ,"22" ,"23" ,"24", "25" ,"26", "28", "29", "31", "32","NA")

colnames(df)<-c("gene","alleles","counts","total","note","kh","kd","kt","kq","k_diff","genotyped_alleles","Freq_by_Clone","freq_by_seq","subject","file")
df<-df[grepl("IGHV",df$gene),]

genes.usage.df$subject <- sapply(str_split(genes.usage.df$subject, "\\."), function(x) x[[2]])
genes.usage.df<-genes.usage.df[grepl("IGHV",genes.usage.df$gene),]
```


```{r}
df_expanded <- df %>%
  separate_rows(genotyped_alleles, sep = ",") %>%
  mutate(genotyped_alleles = as.factor(genotyped_alleles)) %>%
  group_by(gene, subject) %>%
  mutate(n = n(), idx = row_number()) %>%
  ungroup()
```

```{r}
usage_combination <- unique(genes.usage.df[, c("gene", "subject", "frac")])
usage_combination$in_df_usage<-TRUE

filter_gene_sequence_names<-unique(genes.usage.df$gene)

all_combinations <- expand.grid(gene = filter_gene_sequence_names, 
                               subject = unique(df$subject))
existing_combinations <- unique(df_expanded[, c("gene", "subject")])
existing_combinations_df <- as.data.frame(existing_combinations)
existing_combinations_df$in_df_expanded <- TRUE

# Perform a left join
merged_df <- merge(all_combinations, existing_combinations_df, by = c("gene", "subject"), all.x = TRUE)
# Filter to find missing combinations
missing_combinations <- subset(merged_df, is.na(in_df_expanded))
# Perform a left join
merged_df <- merge(missing_combinations, usage_combination, by = c("gene", "subject"), all.x = TRUE)
# Filter to find missing combinations
missing_combinations <- subset(merged_df, frac>0)
# Select only the relevant columns
missing_combinations <- missing_combinations[, c("gene", "subject")]

missing_combinations$genotyped_alleles <- NA
missing_combinations$n <- 1  # Assign an appropriate value
missing_combinations$idx <- 1
missing_combinations$alleles <- NA  # or appropriate default value
missing_combinations$counts <- NA   # or appropriate default value
missing_combinations$total <- NA    # or appropriate default value
missing_combinations$note <- NA     # or appropriate default value
missing_combinations$kh <- NA       # or appropriate default value
missing_combinations$kd <- NA       # or appropriate default value
missing_combinations$kt <- NA       # or appropriate default value
missing_combinations$kq <- NA       # or appropriate default value
missing_combinations$k_diff <- NA   # or appropriate default value
missing_combinations$Freq_by_Clone <-NA
missing_combinations$freq_by_seq<-NA
missing_combinations$file <- NA     # or appropriate default value

# Now df_expanded and missing_combinations have the same structure
c <- rbind(df_expanded, missing_combinations)
```


```{r}
df_expanded <- df_expanded %>%
  mutate(subject_idx = as.numeric(factor(subject)),
         gene_idx = as.numeric(factor(gene)))


df_expanded<- df_expanded %>%
  mutate(modified_allele = ifelse(grepl("_", genotyped_alleles),
                                  sub("_.*", "", genotyped_alleles),
                                  as.character(genotyped_alleles)))


unique_alleles_with_underscore <- df_expanded %>%
  arrange(genotyped_alleles)%>%
  filter(grepl("_", genotyped_alleles)) %>%
  distinct(genotyped_alleles) %>%
  mutate(underscore_number = seq_along(genotyped_alleles))

df_expanded <- df_expanded %>%
  left_join(unique_alleles_with_underscore, by = "genotyped_alleles") %>%
  mutate(underscore_number = ifelse(is.na(underscore_number), NA_integer_, underscore_number))

df_expanded <- df_expanded %>%
  mutate(has_underscore = grepl("_", genotyped_alleles))

legend_data <- df_expanded %>%
  distinct(genotyped_alleles, underscore_number) %>%
  mutate(legend_label = ifelse(is.na(underscore_number),
                               as.character(genotyped_alleles),
                               as.character(paste( "^" ,underscore_number, "^" ,genotyped_alleles, sep = "")))) %>%
  arrange(genotyped_alleles)


unique_alleles <- unique(df_expanded$genotyped_alleles)
unique_modified_alleles <- unique(df_expanded$modified_allele)

# Initialize allele_palette_modified with colors from allele_palette_new
allele_palette_modified <- allele_palette_new

# Loop through the unique_modified_alleles to assign colors
for (allele in unique_alleles) {
  if (!(allele %in% names(allele_palette_new))) {
    # If the modified allele is not in allele_palette_new, assign a new color
    # This could be a default color or based on some logic
    #extracted_part <- gsub(".*\\^(.*?)_.*", "\\1", allele)
    #allele_palette_modified[allele] <-  allele_palette_new[extracted_part]
    allele_palette_modified[allele] <-  allele_palette_new[sub("_.*", "", allele)]
  } else {
    # If the allele already exists in allele_palette_new, use its color
    allele_palette_modified[allele] <- allele_palette_new[allele]
  }
}

```

```{r}
p<-ggplot(df_expanded, aes(xmin = subject_idx - 0.5 + (idx-1)/n, xmax = subject_idx - 0.5 + idx/n,
                        ymin = gene_idx - 0.5, ymax = gene_idx + 0.5)) +
  geom_rect(aes(fill = genotyped_alleles, text = paste("Subject: ", subject))) +
  geom_text(data = subset(df_expanded, has_underscore), 
            aes(x = subject_idx - 0.5 + (idx-0.5)/n, y = gene_idx, label =   paste( "^" ,underscore_number, sep = "")), 
            vjust = 0.5, hjust = 0.5, 
            size = 2)  +
  scale_fill_manual(values = allele_palette_modified, name = " ",
                    breaks = legend_data$genotyped_alleles,
                    labels = legend_data$legend_label) +
  scale_x_continuous(breaks = df_expanded$subject_idx, labels = df_expanded$subject,
                     expand = c(0, 0)) +  # no expansion
  scale_y_continuous(breaks = df_expanded$gene_idx, labels = df_expanded$gene,
                     expand = c(0, 0)) +
  theme_minimal() +
  geom_vline(xintercept = unique(df_expanded$subject_idx) - 0.5, color = "black", size = 0.2) +
  geom_hline(yintercept = unique(df_expanded$gene_idx) - 0.5, color = "black", size = 0.2) +
  labs(fill = " ", x = " ", y = " ") +
  theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5, size = 10),
        axis.text.y = element_text(angle = 0, hjust = 0.5, size = 10),
        legend.position = "none",
        legend.key.size = unit(0.3, "cm"))

# Filter rows where k_diff < 1
df_diagonal <- df_expanded %>%
  filter(k_diff < 1)

p<-p + geom_segment(data = df_diagonal, 
                 aes(x = subject_idx - 0.45, y = gene_idx - 0.45, 
                     xend = subject_idx - 0.45 +1, yend = gene_idx + 0.55), 
                 color = "black", size = 0.2)

```


```{r}
ggplotly(p, tooltip = c("genotyped_alleles", "text"))%>%
  layout(
    autosize = F,
    width = 900,
    height = 2500
  )
```
